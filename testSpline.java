package org.usfirst.frc.team1197.robot;

public class testSpline extends TorTrajectory {

	public testSpline() {
		super(2, 0);
		time.clear();
		translation.clear();
		rotation.clear();
		testMethod(0, 0, 0, 0, 0, 0, 0);
		testMethod(5, -0, -0.0005, -0.0999, 0, 0, 0);
		testMethod(10, -0, -0.0015, -0.1998, 0, 0, 0);
		testMethod(15, -0, -0.003, -0.2997, 0, 0, 0);
		testMethod(20, -0, -0.005, -0.3996, 0, 0, 0);
		testMethod(25, -0.0001, -0.0075, -0.4995, 0, 0, 0);
		testMethod(30, -0.0001, -0.0105, -0.5994, 0, 0, 0);
		testMethod(35, -0.0002, -0.014, -0.6993, 0, 0, 0);
		testMethod(40, -0.0003, -0.018, -0.7992, 0, 0, 0);
		testMethod(45, -0.0004, -0.0225, -0.8991, 0, 0, 0);
		testMethod(50, -0.0005, -0.0275, -0.999, 0, 0, 0);
		testMethod(55, -0.0006, -0.033, -1.0989, 0, 0, 0);
		testMethod(60, -0.0008, -0.039, -1.1988, 0, 0, 0);
		testMethod(65, -0.001, -0.0455, -1.2987, 0, 0, 0);
		testMethod(70, -0.0013, -0.0524, -1.3986, 0, 0, 0);
		testMethod(75, -0.0015, -0.0599, -1.4985, 0, 0, 0);
		testMethod(80, -0.0019, -0.0679, -1.5984, 0, 0, 0);
		testMethod(85, -0.0022, -0.0764, -1.6983, 0, 0, 0);
		testMethod(90, -0.0026, -0.0854, -1.7982, 0, 0, 0);
		testMethod(95, -0.0031, -0.0949, -1.8981, 0, 0, 0);
		testMethod(100, -0.0036, -0.1049, -1.998, 0, 0, 0);
		testMethod(105, -0.0041, -0.1154, -2.0979, 0, 0, 0);
		testMethod(110, -0.0047, -0.1264, -2.1978, 0, 0, 0);
		testMethod(115, -0.0054, -0.1379, -2.2977, 0, 0, 0);
		testMethod(120, -0.0061, -0.1499, -2.3976, 0, 0, 0);
		testMethod(125, -0.0069, -0.1623, -2.4975, 0, 0, 0);
		testMethod(130, -0.0077, -0.1753, -2.5974, 0, 0, 0);
		testMethod(135, -0.0087, -0.1888, -2.6973, 0, 0, 0);
		testMethod(140, -0.0096, -0.2028, -2.7972, 0, 0, 0);
		testMethod(145, -0.0107, -0.2173, -2.8971, 0, 0, 0);
		testMethod(150, -0.0118, -0.2323, -2.997, 0, 0, 0);
		testMethod(155, -0.013, -0.2478, -3.0969, 0, 0, 0);
		testMethod(160, -0.0143, -0.2637, -3.1968, 0, 0, 0);
		testMethod(165, -0.0156, -0.2802, -3.2967, 0, 0, 0);
		testMethod(170, -0.0171, -0.2972, -3.3966, 0, 0, 0);
		testMethod(175, -0.0186, -0.3147, -3.4965, 0, 0, 0);
		testMethod(180, -0.0202, -0.3322, -3.4965, 0, 0, 0);
		testMethod(185, -0.0219, -0.3497, -3.4965, 0, 0, 0);
		testMethod(190, -0.0237, -0.3671, -3.4965, 0, 0, 0);
		testMethod(195, -0.0256, -0.3846, -3.4965, 0, 0, 0);
		testMethod(200, -0.0276, -0.4021, -3.4965, 0, 0, 0);
		testMethod(205, -0.0296, -0.4196, -3.4965, 0, 0, 0);
		testMethod(210, -0.0318, -0.4371, -3.4965, 0, 0, 0);
		testMethod(215, -0.034, -0.4545, -3.4965, 0, 0, 0);
		testMethod(220, -0.0363, -0.472, -3.4965, 0, 0, 0);
		testMethod(225, -0.0387, -0.4895, -3.4965, 0, 0, 0);
		testMethod(230, -0.0412, -0.507, -3.4965, 0, 0, 0);
		testMethod(235, -0.0438, -0.5245, -3.4965, 0, 0, 0);
		testMethod(240, -0.0465, -0.542, -3.4965, 0, 0, 0);
		testMethod(245, -0.0492, -0.5594, -3.4965, 0, 0, 0);
		testMethod(250, -0.0521, -0.5769, -3.4965, 0, 0, 0);
		testMethod(255, -0.055, -0.5944, -3.4965, 0, 0, 0);
		testMethod(260, -0.058, -0.6119, -3.4965, 0, 0, 0);
		testMethod(265, -0.0611, -0.6294, -3.4965, 0, 0, 0);
		testMethod(270, -0.0643, -0.6469, -3.4965, 0, 0, 0);
		testMethod(275, -0.0676, -0.6643, -3.4965, 0, 0, 0);
		testMethod(280, -0.0709, -0.6818, -3.4965, 0, 0, 0);
		testMethod(285, -0.0744, -0.6993, -3.4965, 0, 0, 0);
		testMethod(290, -0.0779, -0.7168, -3.4965, 0, 0, 0);
		testMethod(295, -0.0816, -0.7343, -3.4965, 0, 0, 0);
		testMethod(300, -0.0853, -0.7517, -3.4965, 0, 0, 0);
		testMethod(305, -0.0891, -0.7692, -3.4965, 0, 0, 0);
		testMethod(310, -0.093, -0.7867, -3.4965, 0, 0, 0);
		testMethod(315, -0.0969, -0.8042, -3.4965, 0, 0, 0);
		testMethod(320, -0.101, -0.8217, -3.4965, 0, 0, 0);
		testMethod(325, -0.1052, -0.8392, -3.4965, 0, 0, 0);
		testMethod(330, -0.1094, -0.8566, -3.4965, 0, 0, 0);
		testMethod(335, -0.1137, -0.8741, -3.4965, 0, 0, 0);
		testMethod(340, -0.1181, -0.8916, -3.4965, 0, 0, 0);
		testMethod(345, -0.1226, -0.9091, -3.4965, 0, 0, 0);
		testMethod(350, -0.1272, -0.9266, -3.4965, 0, 0, 0);
		testMethod(355, -0.1319, -0.9441, -3.4965, 0, 0, 0);
		testMethod(360, -0.1367, -0.9615, -3.4965, 0, 0, 0);
		testMethod(365, -0.1415, -0.979, -3.4965, 0, 0, 0);
		testMethod(370, -0.1465, -0.9965, -3.4965, 0, 0, 0);
		testMethod(375, -0.1515, -1.014, -3.4965, 0, 0, 0);
		testMethod(380, -0.1566, -1.0315, -3.4965, 0, 0, 0);
		testMethod(385, -0.1618, -1.049, -3.4965, 0, 0, 0);
		testMethod(390, -0.1671, -1.0664, -3.4965, 0, 0, 0);
		testMethod(395, -0.1725, -1.0839, -3.4965, 0, 0, 0);
		testMethod(400, -0.1779, -1.1014, -3.4965, 0, 0, 0);
		testMethod(405, -0.1835, -1.1189, -3.4965, 0, 0, 0);
		testMethod(410, -0.1891, -1.1364, -3.4965, 0, 0, 0);
		testMethod(415, -0.1948, -1.1538, -3.4965, 0, 0, 0);
		testMethod(420, -0.2007, -1.1713, -3.4965, 0, 0, 0);
		testMethod(425, -0.2066, -1.1888, -3.4965, 0, 0, 0);
		testMethod(430, -0.2125, -1.2063, -3.4965, 0, 0, 0);
		testMethod(435, -0.2186, -1.2238, -3.4965, 0, 0, 0);
		testMethod(440, -0.2248, -1.2413, -3.4965, 0, 0, 0);
		testMethod(445, -0.231, -1.2587, -3.4965, 0, 0, 0);
		testMethod(450, -0.2374, -1.2762, -3.4965, 0, 0, 0);
		testMethod(455, -0.2438, -1.2937, -3.4965, 0, 0, 0);
		testMethod(460, -0.2503, -1.3112, -3.4965, 0, 0, 0);
		testMethod(465, -0.2569, -1.3287, -3.4965, 0, 0, 0);
		testMethod(470, -0.2636, -1.3462, -3.4965, 0, 0, 0);
		testMethod(475, -0.2704, -1.3636, -3.4965, 0, 0, 0);
		testMethod(480, -0.2772, -1.3811, -3.4965, 0, 0, 0);
		testMethod(485, -0.2842, -1.3986, -3.4965, 0, 0, 0);
		testMethod(490, -0.2912, -1.4161, -3.4965, 0, 0, 0);
		testMethod(495, -0.2983, -1.4336, -3.4965, 0, 0, 0);
		testMethod(500, -0.3056, -1.451, -3.4965, 0, 0, 0);
		testMethod(505, -0.3128, -1.4685, -3.4965, 0, 0, 0);
		testMethod(510, -0.3202, -1.486, -3.4965, 0, 0, 0);
		testMethod(515, -0.3277, -1.5035, -3.4965, 0, 0, 0);
		testMethod(520, -0.3353, -1.521, -3.4965, 0, 0, 0);
		testMethod(525, -0.3429, -1.5385, -3.4965, 0, 0, 0);
		testMethod(530, -0.3507, -1.5559, -3.4965, 0, 0, 0);
		testMethod(535, -0.3585, -1.5734, -3.4965, 0, 0, 0);
		testMethod(540, -0.3664, -1.5909, -3.4965, 0, 0, 0);
		testMethod(545, -0.3744, -1.6084, -3.4965, 0, 0, 0);
		testMethod(550, -0.3825, -1.6259, -3.4965, 0, 0, 0);
		testMethod(555, -0.3906, -1.6429, -3.3966, 0, 0, 0);
		testMethod(560, -0.3989, -1.6593, -3.2967, 0, 0, 0);
		testMethod(565, -0.4072, -1.6753, -3.1968, 0, 0, 0);
		testMethod(570, -0.4157, -1.6908, -3.0969, 0, 0, 0);
		testMethod(575, -0.4241, -1.7058, -2.997, 0, 0, 0);
		testMethod(580, -0.4327, -1.7203, -2.8971, 0, 0, 0);
		testMethod(585, -0.4413, -1.7343, -2.7972, 0, 0, 0);
		testMethod(590, -0.4501, -1.7478, -2.6973, 0, 0, 0);
		testMethod(595, -0.4588, -1.7607, -2.5974, 0, 0, 0);
		testMethod(600, -0.4677, -1.7732, -2.4975, 0, 0, 0);
		testMethod(605, -0.4766, -1.7852, -2.3976, 0, 0, 0);
		testMethod(610, -0.4855, -1.7967, -2.2977, 0, 0, 0);
		testMethod(615, -0.4945, -1.8077, -2.1978, 0, 0, 0);
		testMethod(620, -0.5036, -1.8182, -2.0979, 0, 0, 0);
		testMethod(625, -0.5127, -1.8282, -1.998, 0, 0, 0);
		testMethod(630, -0.5219, -1.8377, -1.8981, 0, 0, 0);
		testMethod(635, -0.5311, -1.8467, -1.7982, 0, 0, 0);
		testMethod(640, -0.5403, -1.8551, -1.6983, 0, 0, 0);
		testMethod(645, -0.5496, -1.8631, -1.5984, 0, 0, 0);
		testMethod(650, -0.559, -1.8706, -1.4985, 0, 0, 0);
		testMethod(655, -0.5683, -1.8776, -1.3986, 0, 0, 0);
		testMethod(660, -0.5777, -1.8841, -1.2987, 0, 0, 0);
		testMethod(665, -0.5872, -1.8901, -1.1988, 0, 0, 0);
		testMethod(670, -0.5966, -1.8956, -1.0989, 0, 0, 0);
		testMethod(675, -0.6061, -1.9006, -0.999, 0, 0, 0);
		testMethod(680, -0.6156, -1.9051, -0.8991, 0, 0, 0);
		testMethod(685, -0.6252, -1.9091, -0.7992, 0, 0, 0);
		testMethod(690, -0.6347, -1.9126, -0.6993, 0, 0, 0);
		testMethod(695, -0.6443, -1.9156, -0.5994, 0, 0, 0);
		testMethod(700, -0.6539, -1.9181, -0.4995, 0, 0, 0);
		testMethod(705, -0.6635, -1.9201, -0.3996, 0, 0, 0);
		testMethod(710, -0.6731, -1.9216, -0.2997, 0, 0, 0);
		testMethod(715, -0.6827, -1.9226, -0.1998, 0, 0, 0);
		testMethod(720, -0.6923, -1.9231, -0.0999, 0, 0, 0);
		testMethod(725, -0.7019, -1.9231, -0, 0, 0, 0);
		testMethod(730, -0.7115, -1.9231, -0, 0, 0, 0);
		testMethod(735, -0.7212, -1.9231, -0, 0, 0, 0);
		testMethod(740, -0.7308, -1.9231, -0, 0, 0, 0);
		testMethod(745, -0.7404, -1.9231, -0, 0, 0, 0);
		testMethod(750, -0.75, -1.9231, -0, 0, 0, 0);
		testMethod(755, -0.7596, -1.9231, -0, 0, 0, 0);
		testMethod(760, -0.7692, -1.9231, -0, 0, 0, 0);
		testMethod(765, -0.7788, -1.9231, -0, 0, 0, 0);
		testMethod(770, -0.7885, -1.9231, -0, 0, 0, 0);
		testMethod(775, -0.7981, -1.9231, -0, 0, 0, 0);
		testMethod(780, -0.8077, -1.9231, -0, 0, 0, 0);
		testMethod(785, -0.8173, -1.9231, -0, 0, 0, 0);
		testMethod(790, -0.8269, -1.9231, -0, 0, 0, 0);
		testMethod(795, -0.8365, -1.9231, -0, 0, 0, 0);
		testMethod(800, -0.8462, -1.9231, -0, 0, 0, 0);
		testMethod(805, -0.8558, -1.9231, -0, 0, 0, 0);
		testMethod(810, -0.8654, -1.9231, -0, 0, 0, 0);
		testMethod(815, -0.875, -1.9231, -0, 0, 0, 0);
		testMethod(820, -0.8846, -1.9231, -0, 0, 0, 0);
		testMethod(825, -0.8942, -1.9231, -0, 0, 0, 0);
		testMethod(830, -0.9038, -1.9231, -0, 0, 0, 0);
		testMethod(835, -0.9135, -1.9231, -0, 0, 0, 0);
		testMethod(840, -0.9231, -1.9231, -0, 0, 0, 0);
		testMethod(845, -0.9327, -1.9231, -0, 0, 0, 0);
		testMethod(850, -0.9423, -1.9231, -0, 0, 0, 0);
		testMethod(855, -0.9519, -1.9231, -0, 0, 0, 0);
		testMethod(860, -0.9615, -1.9231, -0, 0, 0, 0);
		testMethod(865, -0.9712, -1.9231, -0, 0, 0, 0);
		testMethod(870, -0.9808, -1.9231, -0, 0, 0, 0);
		testMethod(875, -0.9904, -1.9231, -0, 0, 0, 0);
		testMethod(880, -1, -1.9231, -0, 0, 0, 0);
		testMethod(885, -1.0096, -1.9231, -0, 0, 0, 0);
		testMethod(890, -1.0192, -1.9231, -0, 0, 0, 0);
		testMethod(895, -1.0288, -1.9231, -0, 0, 0, 0);
		testMethod(900, -1.0385, -1.9231, -0, 0, 0, 0);
		testMethod(905, -1.0481, -1.9231, -0, 0, 0, 0);
		testMethod(910, -1.0577, -1.9231, -0, 0, 0, 0);
		testMethod(915, -1.0673, -1.9231, -0, 0, 0, 0);
		testMethod(920, -1.0769, -1.9231, -0, 0, 0, 0);
		testMethod(925, -1.0865, -1.9231, -0, 0, 0, 0);
		testMethod(930, -1.0962, -1.9231, -0, 0, 0, 0);
		testMethod(935, -1.1058, -1.9231, -0, 0, 0, 0);
		testMethod(940, -1.1154, -1.9231, -0, 0, 0, 0);
		testMethod(945, -1.125, -1.9231, -0, 0, 0, 0);
		testMethod(950, -1.1346, -1.9231, -0, 0, 0, 0);
		testMethod(955, -1.1442, -1.9231, -0, 0, 0, 0);
		testMethod(960, -1.1538, -1.9231, -0, 0, 0, 0);
		testMethod(965, -1.1635, -1.9231, -0, 0, 0, 0);
		testMethod(970, -1.1731, -1.9231, -0, 0, 0, 0);
		testMethod(975, -1.1827, -1.9231, -0, 0, 0, 0);
		testMethod(980, -1.1923, -1.9231, -0, 0, 0, 0);
		testMethod(985, -1.2019, -1.9231, -0, 0, 0, 0);
		testMethod(990, -1.2115, -1.9231, -0, 0, 0, 0);
		testMethod(995, -1.2212, -1.9231, -0, 0, 0, 0);
		testMethod(1000, -1.2308, -1.9231, -0, 0, 0, 0);
		testMethod(1005, -1.2404, -1.9231, -0, 0, 0, 0);
		testMethod(1010, -1.25, -1.9231, -0, 0, 0, 0);
		testMethod(1015, -1.2596, -1.9231, -0, 0, 0, 0);
		testMethod(1020, -1.2692, -1.9231, -0, 0, 0, 0);
		testMethod(1025, -1.2788, -1.9231, -0, 0, 0, 0);
		testMethod(1030, -1.2885, -1.9231, -0, 0, 0, 0);
		testMethod(1035, -1.2981, -1.9231, -0, 0, 0, 0);
		testMethod(1040, -1.3077, -1.9231, -0, 0, 0, 0);
		testMethod(1045, -1.3173, -1.9226, 0.0999, 0, 0, 0);
		testMethod(1050, -1.3269, -1.9216, 0.1998, 0, 0, 0);
		testMethod(1055, -1.3365, -1.9201, 0.2997, 0, 0, 0);
		testMethod(1060, -1.3461, -1.9181, 0.3996, 0, 0, 0);
		testMethod(1065, -1.3557, -1.9156, 0.4995, 0, 0, 0);
		testMethod(1070, -1.3653, -1.9126, 0.5994, 0, 0, 0);
		testMethod(1075, -1.3748, -1.9091, 0.6993, 0, 0, 0);
		testMethod(1080, -1.3844, -1.9051, 0.7992, 0, 0, 0);
		testMethod(1085, -1.3939, -1.9006, 0.8991, 0, 0, 0);
		testMethod(1090, -1.4034, -1.8956, 0.999, 0, 0, 0);
		testMethod(1095, -1.4128, -1.8901, 1.0989, 0, 0, 0);
		testMethod(1100, -1.4223, -1.8841, 1.1988, 0, 0, 0);
		testMethod(1105, -1.4317, -1.8776, 1.2987, 0, 0, 0);
		testMethod(1110, -1.441, -1.8706, 1.3986, 0, 0, 0);
		testMethod(1115, -1.4504, -1.8631, 1.4985, 0, 0, 0);
		testMethod(1120, -1.4597, -1.8551, 1.5984, 0, 0, 0);
		testMethod(1125, -1.4689, -1.8467, 1.6983, 0, 0, 0);
		testMethod(1130, -1.4781, -1.8377, 1.7982, 0, 0, 0);
		testMethod(1135, -1.4873, -1.8282, 1.8981, 0, 0, 0);
		testMethod(1140, -1.4964, -1.8182, 1.998, 0, 0, 0);
		testMethod(1145, -1.5055, -1.8077, 2.0979, 0, 0, 0);
		testMethod(1150, -1.5145, -1.7967, 2.1978, 0, 0, 0);
		testMethod(1155, -1.5234, -1.7852, 2.2977, 0, 0, 0);
		testMethod(1160, -1.5323, -1.7732, 2.3976, 0, 0, 0);
		testMethod(1165, -1.5412, -1.7607, 2.4975, 0, 0, 0);
		testMethod(1170, -1.5499, -1.7478, 2.5974, 0, 0, 0);
		testMethod(1175, -1.5587, -1.7343, 2.6973, 0, 0, 0);
		testMethod(1180, -1.5673, -1.7203, 2.7972, 0, 0, 0);
		testMethod(1185, -1.5759, -1.7058, 2.8971, 0, 0, 0);
		testMethod(1190, -1.5843, -1.6908, 2.997, 0, 0, 0);
		testMethod(1195, -1.5928, -1.6753, 3.0969, 0, 0, 0);
		testMethod(1200, -1.6011, -1.6593, 3.1968, 0, 0, 0);
		testMethod(1205, -1.6094, -1.6429, 3.2967, 0, 0, 0);
		testMethod(1210, -1.6175, -1.6259, 3.3966, 0, 0, 0);
		testMethod(1215, -1.6256, -1.6084, 3.4965, 0, 0, 0);
		testMethod(1220, -1.6336, -1.5909, 3.4965, 0, 0, 0);
		testMethod(1225, -1.6415, -1.5734, 3.4965, 0, 0, 0);
		testMethod(1230, -1.6493, -1.5559, 3.4965, 0, 0, 0);
		testMethod(1235, -1.6571, -1.5385, 3.4965, 0, 0, 0);
		testMethod(1240, -1.6647, -1.521, 3.4965, 0, 0, 0);
		testMethod(1245, -1.6723, -1.5035, 3.4965, 0, 0, 0);
		testMethod(1250, -1.6798, -1.486, 3.4965, 0, 0, 0);
		testMethod(1255, -1.6872, -1.4685, 3.4965, 0, 0, 0);
		testMethod(1260, -1.6944, -1.451, 3.4965, 0, 0, 0);
		testMethod(1265, -1.7017, -1.4336, 3.4965, 0, 0, 0);
		testMethod(1270, -1.7088, -1.4161, 3.4965, 0, 0, 0);
		testMethod(1275, -1.7158, -1.3986, 3.4965, 0, 0, 0);
		testMethod(1280, -1.7228, -1.3811, 3.4965, 0, 0, 0);
		testMethod(1285, -1.7296, -1.3636, 3.4965, 0, 0, 0);
		testMethod(1290, -1.7364, -1.3462, 3.4965, 0, 0, 0);
		testMethod(1295, -1.7431, -1.3287, 3.4965, 0, 0, 0);
		testMethod(1300, -1.7497, -1.3112, 3.4965, 0, 0, 0);
		testMethod(1305, -1.7562, -1.2937, 3.4965, 0, 0, 0);
		testMethod(1310, -1.7626, -1.2762, 3.4965, 0, 0, 0);
		testMethod(1315, -1.769, -1.2587, 3.4965, 0, 0, 0);
		testMethod(1320, -1.7752, -1.2413, 3.4965, 0, 0, 0);
		testMethod(1325, -1.7814, -1.2238, 3.4965, 0, 0, 0);
		testMethod(1330, -1.7875, -1.2063, 3.4965, 0, 0, 0);
		testMethod(1335, -1.7934, -1.1888, 3.4965, 0, 0, 0);
		testMethod(1340, -1.7993, -1.1713, 3.4965, 0, 0, 0);
		testMethod(1345, -1.8052, -1.1538, 3.4965, 0, 0, 0);
		testMethod(1350, -1.8109, -1.1364, 3.4965, 0, 0, 0);
		testMethod(1355, -1.8165, -1.1189, 3.4965, 0, 0, 0);
		testMethod(1360, -1.8221, -1.1014, 3.4965, 0, 0, 0);
		testMethod(1365, -1.8275, -1.0839, 3.4965, 0, 0, 0);
		testMethod(1370, -1.8329, -1.0664, 3.4965, 0, 0, 0);
		testMethod(1375, -1.8382, -1.049, 3.4965, 0, 0, 0);
		testMethod(1380, -1.8434, -1.0315, 3.4965, 0, 0, 0);
		testMethod(1385, -1.8485, -1.014, 3.4965, 0, 0, 0);
		testMethod(1390, -1.8535, -0.9965, 3.4965, 0, 0, 0);
		testMethod(1395, -1.8585, -0.979, 3.4965, 0, 0, 0);
		testMethod(1400, -1.8633, -0.9615, 3.4965, 0, 0, 0);
		testMethod(1405, -1.8681, -0.9441, 3.4965, 0, 0, 0);
		testMethod(1410, -1.8728, -0.9266, 3.4965, 0, 0, 0);
		testMethod(1415, -1.8774, -0.9091, 3.4965, 0, 0, 0);
		testMethod(1420, -1.8819, -0.8916, 3.4965, 0, 0, 0);
		testMethod(1425, -1.8863, -0.8741, 3.4965, 0, 0, 0);
		testMethod(1430, -1.8906, -0.8566, 3.4965, 0, 0, 0);
		testMethod(1435, -1.8948, -0.8392, 3.4965, 0, 0, 0);
		testMethod(1440, -1.899, -0.8217, 3.4965, 0, 0, 0);
		testMethod(1445, -1.9031, -0.8042, 3.4965, 0, 0, 0);
		testMethod(1450, -1.907, -0.7867, 3.4965, 0, 0, 0);
		testMethod(1455, -1.9109, -0.7692, 3.4965, 0, 0, 0);
		testMethod(1460, -1.9147, -0.7517, 3.4965, 0, 0, 0);
		testMethod(1465, -1.9184, -0.7343, 3.4965, 0, 0, 0);
		testMethod(1470, -1.9221, -0.7168, 3.4965, 0, 0, 0);
		testMethod(1475, -1.9256, -0.6993, 3.4965, 0, 0, 0);
		testMethod(1480, -1.9291, -0.6818, 3.4965, 0, 0, 0);
		testMethod(1485, -1.9324, -0.6643, 3.4965, 0, 0, 0);
		testMethod(1490, -1.9357, -0.6469, 3.4965, 0, 0, 0);
		testMethod(1495, -1.9389, -0.6294, 3.4965, 0, 0, 0);
		testMethod(1500, -1.942, -0.6119, 3.4965, 0, 0, 0);
		testMethod(1505, -1.945, -0.5944, 3.4965, 0, 0, 0);
		testMethod(1510, -1.9479, -0.5769, 3.4965, 0, 0, 0);
		testMethod(1515, -1.9508, -0.5594, 3.4965, 0, 0, 0);
		testMethod(1520, -1.9535, -0.542, 3.4965, 0, 0, 0);
		testMethod(1525, -1.9562, -0.5245, 3.4965, 0, 0, 0);
		testMethod(1530, -1.9588, -0.507, 3.4965, 0, 0, 0);
		testMethod(1535, -1.9613, -0.4895, 3.4965, 0, 0, 0);
		testMethod(1540, -1.9637, -0.472, 3.4965, 0, 0, 0);
		testMethod(1545, -1.966, -0.4545, 3.4965, 0, 0, 0);
		testMethod(1550, -1.9682, -0.4371, 3.4965, 0, 0, 0);
		testMethod(1555, -1.9704, -0.4196, 3.4965, 0, 0, 0);
		testMethod(1560, -1.9724, -0.4021, 3.4965, 0, 0, 0);
		testMethod(1565, -1.9744, -0.3846, 3.4965, 0, 0, 0);
		testMethod(1570, -1.9763, -0.3671, 3.4965, 0, 0, 0);
		testMethod(1575, -1.9781, -0.3497, 3.4965, 0, 0, 0);
		testMethod(1580, -1.9798, -0.3322, 3.4965, 0, 0, 0);
		testMethod(1585, -1.9814, -0.3147, 3.4965, 0, 0, 0);
		testMethod(1590, -1.9829, -0.2972, 3.4965, 0, 0, 0);
		testMethod(1595, -1.9844, -0.2802, 3.3966, 0, 0, 0);
		testMethod(1600, -1.9857, -0.2637, 3.2967, 0, 0, 0);
		testMethod(1605, -1.987, -0.2478, 3.1968, 0, 0, 0);
		testMethod(1610, -1.9882, -0.2323, 3.0969, 0, 0, 0);
		testMethod(1615, -1.9893, -0.2173, 2.997, 0, 0, 0);
		testMethod(1620, -1.9904, -0.2028, 2.8971, 0, 0, 0);
		testMethod(1625, -1.9913, -0.1888, 2.7972, 0, 0, 0);
		testMethod(1630, -1.9923, -0.1753, 2.6973, 0, 0, 0);
		testMethod(1635, -1.9931, -0.1623, 2.5974, 0, 0, 0);
		testMethod(1640, -1.9939, -0.1499, 2.4975, 0, 0, 0);
		testMethod(1645, -1.9946, -0.1379, 2.3976, 0, 0, 0);
		testMethod(1650, -1.9953, -0.1264, 2.2977, 0, 0, 0);
		testMethod(1655, -1.9959, -0.1154, 2.1978, 0, 0, 0);
		testMethod(1660, -1.9964, -0.1049, 2.0979, 0, 0, 0);
		testMethod(1665, -1.9969, -0.0949, 1.998, 0, 0, 0);
		testMethod(1670, -1.9974, -0.0854, 1.8981, 0, 0, 0);
		testMethod(1675, -1.9978, -0.0764, 1.7982, 0, 0, 0);
		testMethod(1680, -1.9981, -0.0679, 1.6983, 0, 0, 0);
		testMethod(1685, -1.9985, -0.0599, 1.5984, 0, 0, 0);
		testMethod(1690, -1.9987, -0.0524, 1.4985, 0, 0, 0);
		testMethod(1695, -1.999, -0.0455, 1.3986, 0, 0, 0);
		testMethod(1700, -1.9992, -0.039, 1.2987, 0, 0, 0);
		testMethod(1705, -1.9994, -0.033, 1.1988, 0, 0, 0);
		testMethod(1710, -1.9995, -0.0275, 1.0989, 0, 0, 0);
		testMethod(1715, -1.9996, -0.0225, 0.999, 0, 0, 0);
		testMethod(1720, -1.9997, -0.018, 0.8991, 0, 0, 0);
		testMethod(1725, -1.9998, -0.014, 0.7992, 0, 0, 0);
		testMethod(1730, -1.9999, -0.0105, 0.6993, 0, 0, 0);
		testMethod(1735, -1.9999, -0.0075, 0.5994, 0, 0, 0);
		testMethod(1740, -2, -0.005, 0.4995, 0, 0, 0);
		testMethod(1745, -2, -0.003, 0.3996, 0, 0, 0);
		testMethod(1750, -2, -0.0015, 0.2997, 0, 0, 0);
		testMethod(1755, -2, -0.0005, 0.1998, 0, 0, 0);
		testMethod(1760, -2, -0, 0.0999, 0, 0, 0);
		testMethod(1765, -2, -0, -0, 0, 0, 0);
		testMethod(1765, -2, -0, -0, 0, 0, 0);
	}
	public void testMethod(int t, double pos, double vel, double acc, double hed, double omg, double alf) {
		time.add((long) t);
		translation.add(new MotionState1D(pos, vel, acc));
		rotation.add(new MotionState1D(hed, omg, alf));
	}

}